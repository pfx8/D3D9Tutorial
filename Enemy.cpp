//*****************************************************************************
//
// エネミー処理 [Enemy.cpp]
//
// Author : LIAO HANCHEN
//
//*****************************************************************************
#include "Enemy.h"

//*****************************************************************************
//
// コンストラクタ
//
//*****************************************************************************
Enemy::Enemy()
{
	m_upVector = D3DXVECTOR3(0.0f, 1.0f, 0.0f);
	m_lookVector = D3DXVECTOR3(0.0f, 0.0f, 1.0f);
	m_rightVector = D3DXVECTOR3(1.0f, 0.0f, 0.0f);

	m_pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_rot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_scl = D3DXVECTOR3(1.0f, 1.0f, 1.0f);
	//m_directionVector = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

	m_waveAngle = 0.0f;
	m_isLife = true;

	// クラスポインタ
	m_model = new Model;
	m_message = new DebugMessage;
	m_boundingBox = new BoundingBox;
}

//*****************************************************************************
//
// デストラクタ
//
//*****************************************************************************
Enemy::~Enemy()
{
	// クラスポインタ
	RELEASE_CLASS_POINT(m_model);
	RELEASE_CLASS_POINT(m_message);
	RELEASE_CLASS_POINT(m_boundingBox);
}

//*****************************************************************************
//
// エネミー座標を設定
//
//*****************************************************************************
void Enemy::InitEnemy(D3DXVECTOR3 pos)
{
	m_pos = pos;	// 位置
	m_boundingBox->InitBox(5, 11, 10, 0.1f);	// バウンディングボックスを初期化
}

//*****************************************************************************
//
// エネミー移動
//
//*****************************************************************************
void Enemy::EnemyMove(D3DXVECTOR2 planeSize)
{
	// 地図の範囲を超えたら、逆方向に行く
	if (m_pos.x >= planeSize.x * 0.8f || m_pos.x <= -planeSize.x * 0.8f || m_pos.z >= planeSize.y * 0.8f || m_pos.z <= -planeSize.y * 0.8f)
	{
		RotationVecUp(D3DX_PI);
	}

	m_pos += m_lookVector * 0.15;	// 行き方向へ移動
}

//*****************************************************************************
//
// エネミー攻撃
//
//*****************************************************************************
void Enemy::EnemyAttack()
{

}